{"version":3,"sources":["muze-react/index.js","App.js","serviceWorker.js","index.js"],"names":["Muze","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createChart","muze","canvas","data","state","datamodel","rows","columns","width","mountRef","current","parentElement","clientWidth","height","clientHeight","layers","mark","chartType","color","mount","componentDidMount","dataModel","config","React","createRef","prevProps","prevState","setState","react_default","a","createElement","id","ref","Component","require","schema","App","handleClick","inputRef","value","DataModel","style","className","muze_react_Muze","placeholder","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kjrEAIqBA,qBACjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoBVQ,YAAc,WACEC,MACOC,SAEdC,KAAKV,EAAKW,MAAMC,WAChBC,KAAKb,EAAKW,MAAME,MAChBC,QAAQd,EAAKW,MAAMG,SACnBC,MAAMf,EAAKgB,SAASC,QAAQC,cAAcC,aAC1CC,OAAOpB,EAAKgB,SAASC,QAAQC,cAAcG,cAC3CC,OAAO,CAAC,CACLC,KAASvB,EAAKW,MAAMa,aAEvBC,MAAM,UACNC,MAAM1B,EAAKgB,SAASC,UAlCXjB,EAqClB2B,kBAAoB,WAChB3B,EAAKO,eApCLP,EAAKW,MAAQ,CACTE,KAAOd,EAAMc,KACbC,QAAUf,EAAMe,QAChBF,UAAYb,EAAM6B,UAClBC,OAAS9B,EAAM8B,OACfL,UAAYzB,EAAMyB,WAAa,OAEnCxB,EAAKgB,SAAWc,IAAMC,YATR/B,kFAYCgC,EAAWC,GACvB9B,KAAKJ,MAAMyB,YAAcS,EAAUT,YAClCrB,KAAK+B,SAAS,CACVV,UAAUrB,KAAKJ,MAAMyB,YAEzBrB,KAAKI,gDAyBT,OACI4B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aAAaC,IAAKpC,KAAKa,kBA5CTwB,cCA5B9B,SAAO+B,EAAQ,KACfC,EAASD,EAAQ,IAgDRE,cA7Cb,SAAAA,EAAY5C,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IAChB3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KAgBR6C,YAAc,WACZ5C,EAAKkC,SAAS,CACZV,UAAYxB,EAAK6C,SAAS5B,QAAQ6B,SAjBpC9C,EAAKW,MAAQ,CACXa,UAAY,OAEd,IAAMuB,EAAYvC,IAAKuC,UALP,OAMhB/C,EAAK4B,UAAY,IAAImB,EAAUrC,EAAKgC,GACpC1C,EAAKa,KAAO,CAAC,gBACbb,EAAKc,QAAU,CAAC,aAChBd,EAAKgD,MAAQ,CACX5B,OAAS,IACTL,MAAQ,KAEVf,EAAK6C,SAAWf,IAAMC,YAbN/B,wEAwBhB,OACEmC,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACbd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OAAf,cACAd,EAAAC,EAAAC,cAAA,OAAKY,UAAU,cAAcD,MAAO7C,KAAK6C,OACvCb,EAAAC,EAAAC,cAACa,EAAD,CACI1B,UAAarB,KAAKQ,MAAMa,UACxBI,UAAazB,KAAKyB,UAClBf,KAAQV,KAAKU,KACbC,QAAWX,KAAKW,WAGtBqB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOc,YAAY,aAAaZ,IAAKpC,KAAK0C,SAAUO,KAAK,SACzDjB,EAAAC,EAAAC,cAAA,UAAQgB,QAASlD,KAAKyC,aAAtB,mBAvCQJ,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5dfb49d1.chunk.js","sourcesContent":["import muze from 'muze'\nimport 'muze/dist/muze.css'\nimport React,{Component} from 'react'\n\nexport default class Muze extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            rows : props.rows,\n            columns : props.columns,\n            datamodel : props.dataModel,\n            config : props.config,\n            chartType : props.chartType || 'bar'\n        }\n        this.mountRef = React.createRef()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.chartType !== prevState.chartType){\n            this.setState({\n                chartType:this.props.chartType\n            })\n            this.createChart()\n        }\n    }\n\n    createChart = () => {\n        const env = muze();\n        const canvas = env.canvas();\n        canvas\n            .data(this.state.datamodel)\n            .rows(this.state.rows) \n            .columns(this.state.columns)\n            .width(this.mountRef.current.parentElement.clientWidth)\n            .height(this.mountRef.current.parentElement.clientHeight)\n            .layers([{\n                'mark' : this.state.chartType\n            }])\n            .color('Origin') \n            .mount(this.mountRef.current)\n    }\n    \n    componentDidMount = () => {\n        this.createChart()\n    }\n\n    render(){\n        return (\n            <div id='muze-chart' ref={this.mountRef}></div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport muze from 'muze'\nimport Muze from './muze-react'\nimport './App.css';\nconst data = require('./cars.json')\nconst schema = require('./cars-schema.json')\nclass App extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      chartType : 'bar'\n    }\n    const DataModel = muze.DataModel;\n    this.dataModel = new DataModel(data,schema);\n    this.rows = ['Acceleration']\n    this.columns = ['Cylinders']\n    this.style = {\n      height : 400,\n      width : 600\n    }\n    this.inputRef = React.createRef()\n  }\n\n\n  handleClick = () =>{\n    this.setState({\n      chartType : this.inputRef.current.value\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"nav\">React-Muze</div>\n        <div className=\"muze-holder\" style={this.style}>\n          <Muze \n              chartType = {this.state.chartType}\n              dataModel = {this.dataModel}\n              rows = {this.rows}\n              columns = {this.columns}>\n          </Muze>\n        </div>\n        <div>\n          <input placeholder=\"Chart Type\" ref={this.inputRef} type=\"text\"/>\n          <button onClick={this.handleClick}>Update</button>\n        </div>\n      </div>\n    )\n      \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}